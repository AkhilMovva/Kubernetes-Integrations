apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-deployment 
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.name }}
  strategy: 
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template: 
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/flask-configmap.yml") . | sha256sum }}
      name: {{ .Values.pod_name }}
      labels: 
        app: {{ .Values.name }}         
    spec:
      containers:
        - name: flask-app-container
          image: {{ .Values.deployment.image }}:{{ .Values.deployment.tag }}
          env: 
            - name: ENV
              valueFrom:
                configMapKeyRef:
                  name: flask-app-config
                  key: environment
            - name: MYSQL_HOST
              valueFrom:
                configMapKeyRef:
                  name: flask-app-config
                  key: mysql_host
          volumeMounts: 
          - name: database-config-volume
            mountPath: /etc/any/directory/config
          - name: database-secret-volume
            mountPath: /etc/any/directory/secret
            readOnly: true
          ports:
          - containerPort: 5000
      volumes: 
        - name: database-config-volume
          configMap:
            name: flask-app-config
        - name: database-secret-volume
          secret:
            secretName: flask-creds


---
apiVersion: v1
kind: Service
metadata:
  name: flask-nodeport-service 
  labels: 
    app: {{ .Values.name }}
spec:
  # type: NodePort #LoadBalancer 
  selector:
    app: {{ .Values.name }} 
  ports: 
    - name: http
      port: 80 # Service Port
      targetPort: 5000 # Container Port
      # nodePort: 31213 # NodePort